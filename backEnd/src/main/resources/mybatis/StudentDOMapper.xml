<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.neu.csye6200.dao.StudentDOMapper">
    <resultMap id="BaseResultMap" type="edu.neu.csye6200.entity.dto.StudentDO">
        <id column="studentId" jdbcType="INTEGER" property="studentId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="parentName" jdbcType="VARCHAR" property="parentName"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="grade" jdbcType="DOUBLE" property="grade"/>
        <result column="registrationDate" jdbcType="TIMESTAMP" property="registrationDate"/>
        <result column="groupId" jdbcType="INTEGER" property="groupId"/>
        <result column="birthday" jdbcType="TIMESTAMP" property="birthday"/>
        <result column="ageState" jdbcType="INTEGER" property="ageState"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        studentId, name, parentName, address, phone, grade, registrationDate, groupId, birthday,
    ageState
    </sql>
    <select id="selectByExample" parameterType="edu.neu.csye6200.entity.dto.StudentDOCriteria"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from student
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student
        where studentId = #{studentId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from student
        where studentId = #{studentId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="edu.neu.csye6200.entity.dto.StudentDOCriteria">
        delete from student
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="edu.neu.csye6200.entity.dto.StudentDO">
        insert into student (studentId, name, parentName,
                             address, phone, grade,
                             registrationDate, groupId, birthday,
                             ageState)
        values (#{studentId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{parentName,jdbcType=VARCHAR},
                #{address,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{grade,jdbcType=DOUBLE},
                #{registrationDate,jdbcType=TIMESTAMP}, #{groupId,jdbcType=INTEGER}, #{birthday,jdbcType=TIMESTAMP},
                #{ageState,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="edu.neu.csye6200.entity.dto.StudentDO">
        insert into student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="studentId != null">
                studentId,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="parentName != null">
                parentName,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="grade != null">
                grade,
            </if>
            <if test="registrationDate != null">
                registrationDate,
            </if>
            <if test="groupId != null">
                groupId,
            </if>
            <if test="birthday != null">
                birthday,
            </if>
            <if test="ageState != null">
                ageState,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="studentId != null">
                #{studentId,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="parentName != null">
                #{parentName,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="grade != null">
                #{grade,jdbcType=DOUBLE},
            </if>
            <if test="registrationDate != null">
                #{registrationDate,jdbcType=TIMESTAMP},
            </if>
            <if test="groupId != null">
                #{groupId,jdbcType=INTEGER},
            </if>
            <if test="birthday != null">
                #{birthday,jdbcType=TIMESTAMP},
            </if>
            <if test="ageState != null">
                #{ageState,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="edu.neu.csye6200.entity.dto.StudentDOCriteria"
            resultType="java.lang.Long">
        select count(*) from student
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update student
        <set>
            <if test="record.studentId != null">
                studentId = #{record.studentId,jdbcType=INTEGER},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.parentName != null">
                parentName = #{record.parentName,jdbcType=VARCHAR},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.phone != null">
                phone = #{record.phone,jdbcType=VARCHAR},
            </if>
            <if test="record.grade != null">
                grade = #{record.grade,jdbcType=DOUBLE},
            </if>
            <if test="record.registrationDate != null">
                registrationDate = #{record.registrationDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.groupId != null">
                groupId = #{record.groupId,jdbcType=INTEGER},
            </if>
            <if test="record.birthday != null">
                birthday = #{record.birthday,jdbcType=TIMESTAMP},
            </if>
            <if test="record.ageState != null">
                ageState = #{record.ageState,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update student
        set studentId = #{record.studentId,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        parentName = #{record.parentName,jdbcType=VARCHAR},
        address = #{record.address,jdbcType=VARCHAR},
        phone = #{record.phone,jdbcType=VARCHAR},
        grade = #{record.grade,jdbcType=DOUBLE},
        registrationDate = #{record.registrationDate,jdbcType=TIMESTAMP},
        groupId = #{record.groupId,jdbcType=INTEGER},
        birthday = #{record.birthday,jdbcType=TIMESTAMP},
        ageState = #{record.ageState,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="edu.neu.csye6200.entity.dto.StudentDO">
        update student
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="parentName != null">
                parentName = #{parentName,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="grade != null">
                grade = #{grade,jdbcType=DOUBLE},
            </if>
            <if test="registrationDate != null">
                registrationDate = #{registrationDate,jdbcType=TIMESTAMP},
            </if>
            <if test="groupId != null">
                groupId = #{groupId,jdbcType=INTEGER},
            </if>
            <if test="birthday != null">
                birthday = #{birthday,jdbcType=TIMESTAMP},
            </if>
            <if test="ageState != null">
                ageState = #{ageState,jdbcType=INTEGER},
            </if>
        </set>
        where studentId = #{studentId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="edu.neu.csye6200.entity.dto.StudentDO">
        update student
        set name             = #{name,jdbcType=VARCHAR},
            parentName       = #{parentName,jdbcType=VARCHAR},
            address          = #{address,jdbcType=VARCHAR},
            phone            = #{phone,jdbcType=VARCHAR},
            grade            = #{grade,jdbcType=DOUBLE},
            registrationDate = #{registrationDate,jdbcType=TIMESTAMP},
            groupId          = #{groupId,jdbcType=INTEGER},
            birthday         = #{birthday,jdbcType=TIMESTAMP},
            ageState         = #{ageState,jdbcType=INTEGER}
        where studentId = #{studentId,jdbcType=INTEGER}
    </update>
</mapper>
