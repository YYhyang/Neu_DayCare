<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.neu.csye6200.dao.GroupDOMapper">
    <resultMap id="BaseResultMap" type="edu.neu.csye6200.entity.dto.GroupDO">
        <id column="groupId" jdbcType="INTEGER" property="groupId"/>
        <result column="classroomId" jdbcType="INTEGER" property="classroomId"/>
        <result column="ageState" jdbcType="INTEGER" property="ageState"/>
        <result column="teacherId" jdbcType="INTEGER" property="teacherId"/>
        <result column="studentCount" jdbcType="INTEGER" property="studentCount"/>
        <result column="ratio" jdbcType="INTEGER" property="ratio"/>
        <result column="isFull" jdbcType="BIT" property="isFull"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        groupId, classroomId, ageState, teacherId, studentCount, ratio, isFull
    </sql>
    <select id="selectByExample" parameterType="edu.neu.csye6200.entity.dto.GroupDOCriteria" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from group
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from group
        where groupId = #{groupId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from group
        where groupId = #{groupId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="edu.neu.csye6200.entity.dto.GroupDOCriteria">
        delete from group
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="edu.neu.csye6200.entity.dto.GroupDO">
        insert into group (groupId, classroomId, ageState,
                           teacherId, studentCount, ratio,
                           isFull)
        values (#{groupId,jdbcType=INTEGER}, #{classroomId,jdbcType=INTEGER}, #{ageState,jdbcType=INTEGER},
                #{teacherId,jdbcType=INTEGER}, #{studentCount,jdbcType=INTEGER}, #{ratio,jdbcType=INTEGER},
                #{isFull,jdbcType=BIT})
    </insert>
    <insert id="insertSelective" parameterType="edu.neu.csye6200.entity.dto.GroupDO">
        insert into group
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="groupId != null">
                groupId,
            </if>
            <if test="classroomId != null">
                classroomId,
            </if>
            <if test="ageState != null">
                ageState,
            </if>
            <if test="teacherId != null">
                teacherId,
            </if>
            <if test="studentCount != null">
                studentCount,
            </if>
            <if test="ratio != null">
                ratio,
            </if>
            <if test="isFull != null">
                isFull,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="groupId != null">
                #{groupId,jdbcType=INTEGER},
            </if>
            <if test="classroomId != null">
                #{classroomId,jdbcType=INTEGER},
            </if>
            <if test="ageState != null">
                #{ageState,jdbcType=INTEGER},
            </if>
            <if test="teacherId != null">
                #{teacherId,jdbcType=INTEGER},
            </if>
            <if test="studentCount != null">
                #{studentCount,jdbcType=INTEGER},
            </if>
            <if test="ratio != null">
                #{ratio,jdbcType=INTEGER},
            </if>
            <if test="isFull != null">
                #{isFull,jdbcType=BIT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="edu.neu.csye6200.entity.dto.GroupDOCriteria"
            resultType="java.lang.Long">
        select count(*) from group
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update group
        <set>
            <if test="record.groupId != null">
                groupId = #{record.groupId,jdbcType=INTEGER},
            </if>
            <if test="record.classroomId != null">
                classroomId = #{record.classroomId,jdbcType=INTEGER},
            </if>
            <if test="record.ageState != null">
                ageState = #{record.ageState,jdbcType=INTEGER},
            </if>
            <if test="record.teacherId != null">
                teacherId = #{record.teacherId,jdbcType=INTEGER},
            </if>
            <if test="record.studentCount != null">
                studentCount = #{record.studentCount,jdbcType=INTEGER},
            </if>
            <if test="record.ratio != null">
                ratio = #{record.ratio,jdbcType=INTEGER},
            </if>
            <if test="record.isFull != null">
                isFull = #{record.isFull,jdbcType=BIT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update group
        set groupId = #{record.groupId,jdbcType=INTEGER},
        classroomId = #{record.classroomId,jdbcType=INTEGER},
        ageState = #{record.ageState,jdbcType=INTEGER},
        teacherId = #{record.teacherId,jdbcType=INTEGER},
        studentCount = #{record.studentCount,jdbcType=INTEGER},
        ratio = #{record.ratio,jdbcType=INTEGER},
        isFull = #{record.isFull,jdbcType=BIT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="edu.neu.csye6200.entity.dto.GroupDO">
        update group
        <set>
            <if test="classroomId != null">
                classroomId = #{classroomId,jdbcType=INTEGER},
            </if>
            <if test="ageState != null">
                ageState = #{ageState,jdbcType=INTEGER},
            </if>
            <if test="teacherId != null">
                teacherId = #{teacherId,jdbcType=INTEGER},
            </if>
            <if test="studentCount != null">
                studentCount = #{studentCount,jdbcType=INTEGER},
            </if>
            <if test="ratio != null">
                ratio = #{ratio,jdbcType=INTEGER},
            </if>
            <if test="isFull != null">
                isFull = #{isFull,jdbcType=BIT},
            </if>
        </set>
        where groupId = #{groupId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="edu.neu.csye6200.entity.dto.GroupDO">
        update group
        set classroomId  = #{classroomId,jdbcType=INTEGER},
            ageState     = #{ageState,jdbcType=INTEGER},
            teacherId    = #{teacherId,jdbcType=INTEGER},
            studentCount = #{studentCount,jdbcType=INTEGER},
            ratio        = #{ratio,jdbcType=INTEGER},
            isFull       = #{isFull,jdbcType=BIT}
        where groupId = #{groupId,jdbcType=INTEGER}
    </update>
</mapper>
